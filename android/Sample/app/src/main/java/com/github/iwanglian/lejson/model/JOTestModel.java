// Generated by LeJson ,  DO NOT EDIT!
// Feedback to https://github.com/iwanglian/LeJson/issues,  DO NOT EDIT!

// Created by alick on 2016-06-01 16:46:44,  DO NOT EDIT!

package com.github.iwanglian.lejson.model;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.List;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;



public class JOTestModel implements Parcelable {
	private String date; 
	private List<TopStories> topStories; 
	private List<Stories> stories; 

    public static JOTestModel objectFromString(String string) throws JSONException {
        JSONObject jsonObject = new JSONObject(string);
        return objectFromJSON(jsonObject);
    }

    public static String stringFromObject(JOTestModel object) throws JSONException {
        JSONObject jsonObject = JSONFromObject(object);
        return jsonObject.toString();
    }

	public static JOTestModel objectFromJSON(JSONObject jsonObject) {
	    JOTestModel object = new JOTestModel();
	
		object.date = jsonObject.optString("date");
		if (jsonObject.optJSONArray("top_stories") != null) {
		    JSONArray jsonArray = jsonObject.optJSONArray("top_stories");
		    List<TopStories> list = new ArrayList<>();
		    for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject jsonObj = jsonArray.optJSONObject(i);
				if(jsonObj!=null) {
				    TopStories item = TopStories.objectFromJSON(jsonObj);
				    list.add(item);
				}
		    }
		    object.topStories = list;
		}
		
		if (jsonObject.optJSONArray("stories") != null) {
		    JSONArray jsonArray = jsonObject.optJSONArray("stories");
		    List<Stories> list = new ArrayList<>();
		    for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject jsonObj = jsonArray.optJSONObject(i);
				if(jsonObj!=null) {
				    Stories item = Stories.objectFromJSON(jsonObj);
				    list.add(item);
				}
		    }
		    object.stories = list;
		}
		
		return object;
	}
	
	public static JSONObject JSONFromObject(JOTestModel object) {
	    JSONObject jsonObject = new JSONObject();
	    try { 
			jsonObject.put("date", object.date);
			if(object.topStories!=null){
			    List<TopStories> list = object.topStories;
			    JSONArray jsonArray = new JSONArray();
				for (TopStories item : list) {
				    JSONObject jsonObj = TopStories.JSONFromObject(item);
				    jsonArray.put(jsonObj);
				} 
			    jsonObject.put("top_stories",jsonArray);
			} 
			if(object.stories!=null){
			    List<Stories> list = object.stories;
			    JSONArray jsonArray = new JSONArray();
				for (Stories item : list) {
				    JSONObject jsonObj = Stories.JSONFromObject(item);
				    jsonArray.put(jsonObj);
				} 
			    jsonObject.put("stories",jsonArray);
			} 
		} catch (JSONException e) {
		    e.printStackTrace();
		}
		
		return jsonObject; 
	}

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    } 

    public List<TopStories> getTopStories() {
        return topStories;
    }

    public void setTopStories(List<TopStories> topStories) {
        this.topStories = topStories;
    } 

    public List<Stories> getStories() {
        return stories;
    }

    public void setStories(List<Stories> stories) {
        this.stories = stories;
    } 

	public static class TopStories {
		private String image; 
		private int type; 
		private int ID; 
		private String gaPrefix; 
		private String title; 
	
		public static TopStories objectFromJSON(JSONObject jsonObject) {
		    TopStories object = new TopStories();
		
			object.image = jsonObject.optString("image");
			object.type = jsonObject.optInt("type");
			object.ID = jsonObject.optInt("id");
			object.gaPrefix = jsonObject.optString("ga_prefix");
			object.title = jsonObject.optString("title");
			return object;
		}
		
		public static JSONObject JSONFromObject(TopStories object) {
		    JSONObject jsonObject = new JSONObject();
		    try { 
				jsonObject.put("image", object.image);
				jsonObject.put("type", object.type);
				jsonObject.put("id", object.ID);
				jsonObject.put("ga_prefix", object.gaPrefix);
				jsonObject.put("title", object.title);
			} catch (JSONException e) {
			    e.printStackTrace();
			}
			
			return jsonObject; 
		}
	
	    public String getImage() {
	        return image;
	    }
	
	    public void setImage(String image) {
	        this.image = image;
	    } 
	
	    public int getType() {
	        return type;
	    }
	
	    public void setType(int type) {
	        this.type = type;
	    } 
	
	    public int getID() {
	        return ID;
	    }
	
	    public void setID(int ID) {
	        this.ID = ID;
	    } 
	
	    public String getGaPrefix() {
	        return gaPrefix;
	    }
	
	    public void setGaPrefix(String gaPrefix) {
	        this.gaPrefix = gaPrefix;
	    } 
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    } 
	}
	

	public static class Stories implements Parcelable {
		private List<String> images; 
		private int type; 
		private int ID; 
		private String gaPrefix; 
		private String title; 
	
		public static Stories objectFromJSON(JSONObject jsonObject) {
		    Stories object = new Stories();
		
			if (jsonObject.optJSONArray("images") != null) {
			    JSONArray jsonArray = jsonObject.optJSONArray("images");
			    List<String> list = new ArrayList<>();
			    for (int i = 0; i < jsonArray.length(); i++) {
					String item = jsonArray.optString(i);
					list.add(item);
			    }
			    object.images = list;
			}
			
			object.type = jsonObject.optInt("type");
			object.ID = jsonObject.optInt("id");
			object.gaPrefix = jsonObject.optString("ga_prefix");
			object.title = jsonObject.optString("title");
			return object;
		}
		
		public static JSONObject JSONFromObject(Stories object) {
		    JSONObject jsonObject = new JSONObject();
		    try { 
				if(object.images!=null){
				    List<String> list = object.images;
				    JSONArray jsonArray = new JSONArray();
					for (String item : list) {
					    jsonArray.put(item);
					} 
				    jsonObject.put("images",jsonArray);
				} 
				jsonObject.put("type", object.type);
				jsonObject.put("id", object.ID);
				jsonObject.put("ga_prefix", object.gaPrefix);
				jsonObject.put("title", object.title);
			} catch (JSONException e) {
			    e.printStackTrace();
			}
			
			return jsonObject; 
		}
	
	    public List<String> getImages() {
	        return images;
	    }
	
	    public void setImages(List<String> images) {
	        this.images = images;
	    } 
	
	    public int getType() {
	        return type;
	    }
	
	    public void setType(int type) {
	        this.type = type;
	    } 
	
	    public int getID() {
	        return ID;
	    }
	
	    public void setID(int ID) {
	        this.ID = ID;
	    } 
	
	    public String getGaPrefix() {
	        return gaPrefix;
	    }
	
	    public void setGaPrefix(String gaPrefix) {
	        this.gaPrefix = gaPrefix;
	    } 
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }

		@Override
		public int describeContents() {
			return 0;
		}

		@Override
		public void writeToParcel(Parcel dest, int flags) {
			dest.writeStringList(this.images);
			dest.writeInt(this.type);
			dest.writeInt(this.ID);
			dest.writeString(this.gaPrefix);
			dest.writeString(this.title);
		}

		public Stories() {
		}

		protected Stories(Parcel in) {
			this.images = in.createStringArrayList();
			this.type = in.readInt();
			this.ID = in.readInt();
			this.gaPrefix = in.readString();
			this.title = in.readString();
		}

		public static final Creator<Stories> CREATOR = new Creator<Stories>() {
			@Override
			public Stories createFromParcel(Parcel source) {
				return new Stories(source);
			}

			@Override
			public Stories[] newArray(int size) {
				return new Stories[size];
			}
		};
	}

	@Override
	public int describeContents() {
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString(this.date);
		dest.writeList(this.topStories);
		dest.writeList(this.stories);
	}

	public JOTestModel() {
	}

	protected JOTestModel(Parcel in) {
		this.date = in.readString();
		this.topStories = new ArrayList<TopStories>();
		in.readList(this.topStories, TopStories.class.getClassLoader());
		this.stories = new ArrayList<Stories>();
		in.readList(this.stories, Stories.class.getClassLoader());
	}

	public static final Parcelable.Creator<JOTestModel> CREATOR = new Parcelable.Creator<JOTestModel>() {
		@Override
		public JOTestModel createFromParcel(Parcel source) {
			return new JOTestModel(source);
		}

		@Override
		public JOTestModel[] newArray(int size) {
			return new JOTestModel[size];
		}
	};
}

