// Generated by LeJson ,  DO NOT EDIT!
// Feedback to https://github.com/iwanglian/LeJson/issues,  DO NOT EDIT!

// Created by alick on 2016-06-01 14:31:58,  DO NOT EDIT!

package com.github.iwanglian.lejson.model;

import java.util.List;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;



public class JOTestModel2 {
	private List<List<KeyObj>> keyObj; 
	private B b; 
	private double f; 

    public static JOTestModel2 objectFromString(String string) throws JSONException {
        JSONObject jsonObject = new JSONObject(string);
        return objectFromJSON(jsonObject);
    }

    public static String stringFromObject(JOTestModel2 object) throws JSONException {
        JSONObject jsonObject = JSONFromObject(object);
        return jsonObject.toString();
    }

	public static JOTestModel2 objectFromJSON(JSONObject jsonObject) {
	    JOTestModel2 object = new JOTestModel2();
	
		if (jsonObject.optJSONArray("keyObj") != null) {
		    JSONArray jsonArray = jsonObject.optJSONArray("keyObj");
		    List<List<KeyObj>> list = new ArrayList<>();
		    for (int i = 0; i < jsonArray.length(); i++) {
				JSONArray jsonArray1 = jsonArray.optJSONArray(i);
				List<KeyObj> list1 = new ArrayList<>();
				for (int i1 = 0; i1 < jsonArray1.length(); i1++) {
					JSONObject jsonObj = jsonArray1.optJSONObject(i);
					if(jsonObj!=null) {
					    KeyObj item = KeyObj.objectFromJSON(jsonObj);
					    list1.add(item);
					}
				}
				list.add(list1);
		    }
		    object.keyObj = list;
		}
		
		if (jsonObject.optJSONObject("b") != null) {
		    JSONObject jsonObj = jsonObject.optJSONObject("b");
		    object.b = B.objectFromJSON(jsonObj);
		}
		
		object.f = jsonObject.optDouble("f");
		return object;
	}
	
	public static JSONObject JSONFromObject(JOTestModel2 object) {
	    JSONObject jsonObject = new JSONObject();
	    try { 
			if(object.keyObj!=null){
			    List<List<KeyObj>> list = object.keyObj;
			    JSONArray jsonArray = new JSONArray();
				for (List<KeyObj> list1 : list) {
				    JSONArray jsonArray1 = new JSONArray();
					for (KeyObj item : list1) {
					    JSONObject jsonObj = KeyObj.JSONFromObject(item);
					    jsonArray1.put(jsonObj);
					} 
				    jsonArray.put(jsonArray1);
				} 
			    jsonObject.put("keyObj",jsonArray);
			} 
			if(object.b != null){
			    JSONObject jsonObj = B.JSONFromObject(object.b);
			    jsonObject.put("b",jsonObj);
			} 
			jsonObject.put("f", object.f);
		} catch (JSONException e) {
		    e.printStackTrace();
		}
		
		return jsonObject; 
	}

    public List<List<KeyObj>> getKeyObj() {
        return keyObj;
    }

    public void setKeyObj(List<List<KeyObj>> keyObj) {
        this.keyObj = keyObj;
    } 

    public B getB() {
        return b;
    }

    public void setB(B b) {
        this.b = b;
    } 

    public double getF() {
        return f;
    }

    public void setF(double f) {
        this.f = f;
    } 

	public static class KeyObj {
		private int m; 
		private String n; 
	
		public static KeyObj objectFromJSON(JSONObject jsonObject) {
		    KeyObj object = new KeyObj();
		
			object.m = jsonObject.optInt("m");
			object.n = jsonObject.optString("n");
			return object;
		}
		
		public static JSONObject JSONFromObject(KeyObj object) {
		    JSONObject jsonObject = new JSONObject();
		    try { 
				jsonObject.put("m", object.m);
				jsonObject.put("n", object.n);
			} catch (JSONException e) {
			    e.printStackTrace();
			}
			
			return jsonObject; 
		}
	
	    public int getM() {
	        return m;
	    }
	
	    public void setM(int m) {
	        this.m = m;
	    } 
	
	    public String getN() {
	        return n;
	    }
	
	    public void setN(String n) {
	        this.n = n;
	    } 
	}
	

	public static class B {
		private String c; 
	
		public static B objectFromJSON(JSONObject jsonObject) {
		    B object = new B();
		
			object.c = jsonObject.optString("c");
			return object;
		}
		
		public static JSONObject JSONFromObject(B object) {
		    JSONObject jsonObject = new JSONObject();
		    try { 
				jsonObject.put("c", object.c);
			} catch (JSONException e) {
			    e.printStackTrace();
			}
			
			return jsonObject; 
		}
	
	    public String getC() {
	        return c;
	    }
	
	    public void setC(String c) {
	        this.c = c;
	    } 
	}
	
}

